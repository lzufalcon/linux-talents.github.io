#!/bin/bash
#
# run -- Run the docker image of the lab
#

DOCKER_DIR=$(cd $(dirname $0) && pwd)
CONFIG_DIR=$DOCKER_DIR/../configs/

LAB_WORKDIR=/lab/
LAB_TOOLS=$CONFIG_DIR/tools/

IMAGE=$(< $CONFIG_DIR/name)

LAB_HOST_TOOL=$LAB_TOOLS/run

LAB_CAPS=$CONFIG_DIR/caps
LAB_DEVICES=$CONFIG_DIR/devices
LAB_LIMITS=$CONFIG_DIR/limits
LAB_PORTMAP=$CONFIG_DIR/portmap
LAB_VOLUMEMAP=$CONFIG_DIR/volumemap

lab_name=`basename $IMAGE`
lab_dir=`dirname $DOCKER_DIR`
lab_workdir=$LAB_WORKDIR

LAB_CONTAINER_NAME=$CONFIG_DIR/.container_name
LAB_CONTAINER_ID=$CONFIG_DIR/.container_id
LAB_LOCAL_PORT=$CONFIG_DIR/.local_port
LAB_HOST_NAME=$CONFIG_DIR/.host_name
LAB_UNIX_PWD=$CONFIG_DIR/.unix_pwd
LAB_VNC_PWD=$CONFIG_DIR/.vnc_pwd

remote_port=6080

# Check container conflicts
CONTAINER_ID=""
[ -f $LAB_CONTAINER_ID ] && CONTAINER_ID=$(< $LAB_CONTAINER_ID)
if [ -n "$CONTAINER_ID" ]; then
    docker ps -f id=$CONTAINER_ID | grep -v PORTS
    if [ $? -eq 0 ]; then
        echo -e "\nLOG: $CONTAINER_ID exist, remove $LAB_CONTAINER_ID before create new.\n"
	exit
    fi
fi

# Generate an unique local port
retry=0
local_port=""

while :;
do
    [ $retry -eq 0 ] && [ -f $LAB_LOCAL_PORT ] && local_port=$(< $LAB_LOCAL_PORT)
    [ -z "$local_port" -o $retry -ne 0 ] && local_port=$((RANDOM/500+6080))

    echo "LOG: new vnc port: $local_port"

    # Make sure it is unique
    ports=`docker ps -a | grep -v PORTS | grep "0.0.0.0:" | sed -e "s/.*0.0.0.0:\([0-9]*\)-.*/\1/g" | tr '\n' ' '`
    [ -n "$ports" ] && echo "LOG: old vnc ports: $ports"

    retry=1
    for port in $ports
    do
	if [ $local_port -eq $port ]; then
		retry=2
		break
	fi
    done

    [ $retry -eq 1 ] && break
    echo "LOG: Retry $retry to get an unique port"
done

# Require to prepare some environment for docker containers in host
[ -f $LAB_HOST_TOOL ] && $LAB_HOST_TOOL

# Run the lab via start a lab container
if [ -f $LAB_CAPS ]; then
  lab_caps=""
  for cap in $(< $LAB_CAPS)
  do
    lab_caps="$lab_caps --cap-add $cap"
  done
fi

if [ -f $LAB_DEVICES  ]; then
  lab_devices=""
  for dev in $(< $LAB_DEVICES)
  do
    lab_devices="$lab_devices --device $dev"
  done
fi

lab_portmap="-p $local_port:$remote_port"

if [ -f $LAB_PORTMAP  ]; then
  for portmap in $(< $LAB_PORTMAP)
  do
    lab_portmap="$lab_portmap -p $portmap"
  done
fi

lab_volumemap="-v $lab_dir:$lab_workdir"
if [ -f $LAB_VOLUMEMAP  ]; then
  for volumemap in $(< $LAB_VOLUMEMAP)
  do
    lab_volumemap="$lab_volumemap -v $volumemap"
  done
fi

[ -f $LAB_LIMITS ] && lab_limits=$(< $LAB_LIMITS)

container_name=${lab_name}-${local_port}

# Remove the old one if exist
docker ps -a | grep -q $container_name

[ $? -eq 0 ] && docker rm -f $container_name

CONTAINER_ID=$(docker run -d --privileged \
		--name $container_name \
                $lab_portmap \
                $lab_caps \
                $lab_devices \
                $lab_limits \
                $lab_volumemap \
                $IMAGE)

echo "LOG: Wait for lab launching..."
while :;
do
    pwd=`docker logs $CONTAINER_ID 2>/dev/null | grep Password`
    sleep 2
    [ -n "$pwd" ] && break
done

echo "LOG: Container ID: ${CONTAINER_ID:0:12} Container Name: $container_name"
echo "LOG: $pwd"

if [ -f $LAB_PORTMAP ]; then
  grep -q 80 $LAB_PORTMAP
  if [ $? -eq 0 ]; then
    docker logs $CONTAINER_ID 2>/dev/null | grep Jekyll
    lab_web_port=$(grep 80 $LAB_PORTMAP | cut -d':' -f1)

    [ -f $LAB_HOST_NAME ] && lab_host_name=$(< $LAB_HOST_NAME)
    [ -z "$lab_host_name" ] && lab_host_name="localhost"
    echo "LOG: Local Web Address: http://$lab_host_name:$lab_web_port/"
  fi
fi

unix_pwd=`echo $pwd | sed -e "s/.* Password: \([^ ]*\) .*/\1/g"`
vnc_pwd=`echo $pwd | sed -e "s/.* VNC Password: \(.*\)$/\1/g"`

# Save the lab's information
echo ${CONTAINER_ID:0:12} > $LAB_CONTAINER_ID
echo $container_name > $LAB_CONTAINER_NAME
echo $local_port > $LAB_LOCAL_PORT
echo $unix_pwd > $LAB_UNIX_PWD
echo $vnc_pwd > $LAB_VNC_PWD

# Open the lab
$DOCKER_DIR/open $1
